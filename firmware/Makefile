#
# Copyright (c) 2019 MaiKe Labs
#
# This makefile allows you to build sketches from the command line
# without the Arduino environment (Without Stupid Java).
#
#  1. Set the line containing "MCU" to match your board's processor.
#     Older one's are atmega8 based, newer ones like Arduino Mini, Bluetooth
#     or Diecimila have the atmega168.  If you're using a LilyPad Arduino,
#     change F_CPU to 8000000.
#
#  2. Type "make" to compile/verify your program.
#
#  3. Type "make flash" to upload your program into your board
#

TARGET = firmware.pde
ARDUINO_CORES = cores
LIB_DIR = libraries

ifeq ($(OS),Windows_NT)
TOOLCHAIN_DIR = c:/Users/Jack/Documents/arduino-1.8.7-windows
#TOOLCHAIN_DIR = d:/Arduino/Arduino-0022
PORT = COM7
else
TOOLCHAIN_DIR = /usr/share/arduino
	ifeq ($(UNAME_S),Linux)
		PORT ?= /dev/ttyUSB0
	endif
	ifeq ($(UNAME_S),Darwin)
		PORT ?= /dev/cu.SLAB_USBtoUART
	endif
endif

UPLOAD_RATE = 57600
AVRDUDE_PROGRAMMER = stk500v1
MCU = atmega328p
F_CPU = 16000000

VERSION=22

ifeq ($(OS),Windows_NT)
AVR_TOOLS_PATH 	= $(TOOLCHAIN_DIR)/hardware/tools/avr/bin
AVRDUDE_PATH = $(TOOLCHAIN_DIR)/hardware/tools/avr/bin
else
AVR_TOOLS_PATH 	= $(TOOLCHAIN_DIR)/hardware/tools/avr/bin
AVRDUDE_PATH = $(TOOLCHAIN_DIR)/hardware/tools/avr/bin
endif

#Note that if your program has dependencies other than those
#already listed below, you will need to add them accordingly.
C_SRC =  										\
$(ARDUINO_CORES)/wiring_pulse.c 						\
$(ARDUINO_CORES)/wiring_analog.c 						\
$(ARDUINO_CORES)/wiring.c 								\
$(ARDUINO_CORES)/wiring_digital.c 						\
$(ARDUINO_CORES)/WInterrupts.c 							\
$(ARDUINO_CORES)/pins_arduino.c 						\
$(LIB_DIR)/Wire/utility/twi.c							\
$(ARDUINO_CORES)/wiring_shift.c

CPP_SRC = 										\
$(ARDUINO_CORES)/HardwareSerial.cpp 					\
$(ARDUINO_CORES)/Print.cpp 								\
$(ARDUINO_CORES)/WString.cpp 							\
$(ARDUINO_CORES)/Tone.cpp 								\
$(ARDUINO_CORES)/main.cpp								\
$(LIB_DIR)/Wire/Wire.cpp								\
afsk.cpp		\
afsk_avr.cpp	\
aprs.cpp		\
ax25.cpp		\
buzzer_avr.cpp	\
gps.cpp			\
modem_avr.cpp	\
pin_avr.cpp		\
power_avr.cpp	\
radio.cpp		\
radio_dmo.cpp	\
sensors_avr.cpp	
#$(ARDUINO_CORES)/WMath.cpp 								\
#$(LIB_DIR)/SPI/src/SPI.cpp								\
#$(LIB_DIR)/LowPower/LowPower.cpp						\

MAIN_CPP = main.cpp

SRC = $(C_SRC)

CPPSRC_ALL = $(CPP_SRC) $(MAIN_CPP)

FORMAT = ihex

# Name of this Makefile (used for "make depend").
MAKEFILE = Makefile

# Debugging format.
# Native formats for AVR-GCC's -g are stabs [default], or dwarf-2.
# AVR (extended) COFF requires stabs, plus an avr-objcopy run.
#DEBUG = stabs
DEBUG =

OPT = s

# Place -D or -U options here
CDEFS = -DF_CPU=$(F_CPU)L -DARDUINO=$(VERSION) -DARDUINO_ARCH_AVR
CXXDEFS = -DF_CPU=$(F_CPU)L -DARDUINO=$(VERSION) -DARDUINO_ARCH_AVR

# Place -I options here
CINCS = -I $(ARDUINO_CORES)
CXXINCS = -I $(ARDUINO_CORES)

CINCS += -I  $(LIB_DIR)/SPI							\
			-I $(LIB_DIR)/EEPROM					\
			-I $(LIB_DIR)/LowPower					\
			-I $(LIB_DIR)/Wire						\
			-I $(LIB_DIR)/Wire/utility				\
			-I .									

CXXINCS += -I  $(LIB_DIR)/SPI						\
			-I $(LIB_DIR)/EEPROM					\
			-I $(LIB_DIR)/LowPower					\
			-I $(LIB_DIR)/Wire						\
			-I $(LIB_DIR)/Wire/utility				\
			-I .									


# Compiler flag to set the C Standard level.
# c89   - "ANSI" C
# gnu89 - c89 plus GCC extensions
# c99   - ISO C99 standard (not yet fully implemented)
# gnu99 - c99 plus GCC extensions
#CSTANDARD = -std=gnu99

CDEBUG = -g$(DEBUG)
#CWARN = -Wall -Wstrict-prototypes
CWARN = -w #suppress all warnings

#CTUNING = -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums

CTUNING = -ffunction-sections -fdata-sections
CXXTUNING = -fno-exceptions -ffunction-sections -fdata-sections
CEXTRA = -MMD -DARDUINO=22

CFLAGS = $(CDEBUG) -O$(OPT) $(CWARN) $(CTUNING) $(CDEFS) $(CINCS) $(CSTANDARD) $(CEXTRA)
CXXFLAGS = $(CDEBUG) -O$(OPT) $(CWARN) $(CXXTUNING) $(CDEFS) $(CINCS) $(CEXTRA)

LDFLAGS = -O$(OPT) -lm -Wl,--gc-sections


# Programming support using avrdude. Settings and variables.
AVRDUDE_PORT = $(PORT)
AVRDUDE_WRITE_MAIN = -U flash:w:build/main.hex
AVRDUDE_WRITE_EEPROM = -U eeprom:w:eeprom.bin:r

AVRDUDE_FLAGS = -V -F -C $(TOOLCHAIN_DIR)/hardware/tools/avr/etc/avrdude.conf \
-c arduino -p $(MCU) -P $(AVRDUDE_PORT) -c $(AVRDUDE_PROGRAMMER) \
-b $(UPLOAD_RATE) -D

# Program settings
CC = $(AVR_TOOLS_PATH)/avr-gcc
CXX = $(AVR_TOOLS_PATH)/avr-g++
LD = $(AVR_TOOLS_PATH)/avr-gcc
OBJCOPY = $(AVR_TOOLS_PATH)/avr-objcopy
OBJDUMP = $(AVR_TOOLS_PATH)/avr-objdump
AR  = $(AVR_TOOLS_PATH)/avr-ar
SIZE = $(AVR_TOOLS_PATH)/avr-size
NM = $(AVR_TOOLS_PATH)/avr-nm
AVRDUDE = $(AVRDUDE_PATH)/avrdude
REMOVE = rm -f
MV = mv -f

#OBJ = $(SRC:.c=.o) $(CPPSRC_ALL:.cpp=.o) $(ASRC:.S=.o)
OBJ_M = $(C_SRC:.c=.o) $(CPP_SRC:.cpp=.o)

LST = $(ASRC:.S=.lst) $(CPPSRC_ALL:.cpp=.lst) $(SRC:.c=.lst)

ALL_CFLAGS = $(CFLAGS) -mmcu=$(MCU)
ALL_CXXFLAGS = $(CXXFLAGS) -mmcu=$(MCU)
ALL_ASFLAGS = -x assembler-with-cpp $(ASFLAGS) -mmcu=$(MCU)
ALL_LDFLAGS = $(LDFLAGS) -mmcu=$(MCU)


all: build_files rebuild build sizeafter

build: elf hex

build/main.o: 
	test -d build || mkdir build
	#echo '#include "Arduino.h"' > build/main.cpp
	cat $(TARGET) >> build/main.cpp
	cat $(ARDUINO_CORES)/main.cpp >> build/main.cpp
	$(CXX) -c $(ALL_CXXFLAGS) build/main.cpp -o build/main.o
	echo $(CPP_SRC)

rebuild:
	$(REMOVE) build/main.*

elf: build/main.elf
hex: build/main.hex
eep: build/main.eep
lss: build/main.lss
sym: build/main.sym

# Program the device.
upload: build/main.hex
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_MAIN)

flash: build/main.hex
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_MAIN)

eeprom: eeprom.bin
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_EEPROM)

	# Display size of file.
HEXSIZE = $(SIZE) --target=$(FORMAT) build/main.hex
ELFSIZE = $(SIZE)  build/main.elf
sizebefore:
	@if [ -f build/main.elf ]; then echo; echo $(MSG_SIZE_BEFORE); $(HEXSIZE); echo; fi

sizeafter:
	@if [ -f build/main.elf ]; then echo; echo $(MSG_SIZE_AFTER); $(HEXSIZE); echo; fi


# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.
COFFCONVERT=$(OBJCOPY) --debugging \
--change-section-address .data-0x800000 \
--change-section-address .bss-0x800000 \
--change-section-address .noinit-0x800000 \
--change-section-address .eeprom-0x810000


coff: build/main.elf
	$(COFFCONVERT) -O coff-avr build/main.elf main.cof


extcoff: main.elf
	$(COFFCONVERT) -O coff-ext-avr build/main.elf main.cof


.SUFFIXES: .elf .hex .eep .lss .sym

.elf.hex:
	$(OBJCOPY) -O $(FORMAT) -R .eeprom $< $@

.elf.eep:
	$(OBJCOPY) -O $(FORMAT) -j .eeprom --set-section-flags=.eeprom="alloc,load" \
	--no-change-warnings \
	--change-section-lma .eeprom=0 $< $@

# Create extended listing file from ELF output file.
.elf.lss:
	$(OBJDUMP) -h -S $< > $@

# Create a symbol table from ELF output file.
.elf.sym:
	$(NM) -n $< > $@

# Link: create ELF output file from library.
build/main.elf: build/main.o build/core.a
	$(LD) $(ALL_LDFLAGS) -o $@ build/main.o build/core.a

build/core.a: $(OBJ_M)
	@for i in $(OBJ_M); do echo $(AR) rcs build/core.a $$i; $(AR) rcs build/core.a $$i; done


# Compile: create object files from C++ source files.
.cpp.o:
	$(CXX) -c $(ALL_CXXFLAGS) $< -o $@

# Compile: create object files from C source files.
.c.o:
	$(CC) -c $(ALL_CFLAGS) $< -o $@


# Compile: create assembler files from C source files.
.c.s:
	$(CC) -S $(ALL_CFLAGS) $< -o $@


# Assemble: create object files from assembler source files.
.S.o:
	$(CC) -c $(ALL_ASFLAGS) $< -o $@


# Automatic dependencies
%.d: %.c
	$(CC) -M $(ALL_CFLAGS) $< | sed "s;$(notdir $*).o:;$*.o $*.d:;" > $@

%.d: %.cpp
	$(CXX) -M $(ALL_CXXFLAGS) $< | sed "s;$(notdir $*).o:;$*.o $*.d:;" > $@


# Target: clean project.
clean:
	$(REMOVE) build/main.hex build/main.eep build/main.cof build/main.elf \
	build/main.map build/main.sym build/main.o build/main.lss build/core.a \
	$(OBJ_M) $(LST) $(SRC:.c=.s) $(SRC:.c=.d) $(CPPSRC_ALL:.cpp=.s) $(CPPSRC_ALL:.cpp=.d) \
	build/main.cpp
	$(REMOVE) -r build

.PHONY:	all rebuild build elf hex eep lss sym program coff extcoff clean build_files sizebefore sizeafter
